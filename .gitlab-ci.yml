variables:
  DEBIAN_FRONTEND: noninteractive
  MESON_TEST_TIMEOUT_MULTIPLIER: 3
  MESON_BUILD_DIR: _build
  DOCS_BUILD_DIR: _reference
  TARBALL_ARTIFACT_PATH: ${MESON_BUILD_DIR}/meson-dist/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.xz

include:
  - component: "gitlab.gnome.org/GNOME/citemplates/release-service@master"
    inputs:
      job-stage: release
      dist-job-name: build:dist:ubuntu
      tarball-artifact-path: ${TARBALL_ARTIFACT_PATH}

stages:
  - build
  - deploy
  - release

.build:ubuntu:base:
  image: ubuntu:devel
  before_script:
    # Disable installing of manpages and docs
    - |
      cat <<"EOF" | tee /etc/dpkg/dpkg.cfg.d/01_nodoc
      # Delete man pages
      path-exclude=/usr/share/man/*

      # Delete docs
      path-exclude=/usr/share/doc/*
      path-include=/usr/share/doc/*/copyright
      EOF

     # Disable installing of locale files
    - |
      cat <<"EOF" | tee /etc/dpkg/dpkg.cfg.d/01_nolocales
      # Delete locales
      path-exclude=/usr/share/locale/*
      EOF

    - apt-get update

    # Install eatmydata
    - apt install -y -q eatmydata
    - mkdir -p "/usr/local/libexec/dt-deb-action"
    - ln -s /usr/bin/eatmydata /usr/local/libexec/dt-deb-action/dpkg
    - echo 'Dir::Bin::dpkg /usr/local/libexec/dt-deb-action/dpkg;' >
      /etc/apt/apt.conf.d/00dt-deb-action-eatmydata

    - apt-get install -q -y --no-install-recommends
        dbus-daemon
        gobject-introspection
        libgdk-pixbuf-2.0-dev
        libgirepository1.0-dev
        libglib2.0-dev
        libgtk-4-dev
        libpopt-dev
        xmlto
        meson
        ninja-build
        python3-pip
        python3-setuptools
        python3-dbusmock
        xsltproc
        docbook-xsl-ns
        gi-docgen
        xvfb
  script:
    - meson setup ${MESON_BUILD_DIR} -Ddocbook_docs=enabled

build:ubuntu:
  stage: build
  extends:
    - .build:ubuntu:base
  script:
    - !reference [".build:ubuntu:base", "script"]
    - meson install -C ${MESON_BUILD_DIR}
    - mv ${MESON_BUILD_DIR}/docs/reference/libnotify-0 ${DOCS_BUILD_DIR}
  artifacts:
    expose_as: "Build artifacts"
    paths:
      - ${MESON_BUILD_DIR}/docs/notification-spec.html
      - ${DOCS_BUILD_DIR}
      - ${MESON_BUILD_DIR}/meson-logs

build:coverage:ubuntu:
  stage: build
  extends:
    - .build:ubuntu:base
  before_script:
    - !reference [".build:ubuntu:base", "before_script"]
    - apt-get install -q -y gcovr
  script:
    - meson setup ${MESON_BUILD_DIR} -Db_coverage=true
    - meson test -C ${MESON_BUILD_DIR} --print-errorlogs
    - ninja -C ${MESON_BUILD_DIR} coverage || true
    - cat ${MESON_BUILD_DIR}/meson-logs/coverage.txt || true
  artifacts:
    reports:
      junit: ${MESON_BUILD_DIR}/meson-logs/testlog.junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${MESON_BUILD_DIR}/meson-logs/coverage.xml
    expose_as: 'Coverage Report'
    when: always
    paths:
      - ${MESON_BUILD_DIR}/meson-logs
      - ${MESON_BUILD_DIR}/meson-logs/coveragereport/index.html
    expire_in: 1 week
  coverage: '/^TOTAL.*\s+(\d+\%)$/'

build:dist:ubuntu:
  stage: build
  extends:
    - .build:ubuntu:base
  before_script:
    - !reference [".build:ubuntu:base", "before_script"]
    - apt-get install -q -y git
  script:
    - !reference [".build:ubuntu:base", "script"]
    - meson dist -C "${MESON_BUILD_DIR}" --include-subprojects
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: "always"
    paths:
      - "${TARBALL_ARTIFACT_PATH}"

pages:
  stage: deploy
  needs:
    - job: build:ubuntu
      artifacts: true
    - job: build:coverage:ubuntu
      artifacts: true
  script:
    - mkdir public
    - mv ${DOCS_BUILD_DIR}/* public/
    - mv ${MESON_BUILD_DIR}/meson-logs/coveragereport public/coverage
  artifacts:
    when: on_success
    paths:
      - public
  # https://github.com/linux-test-project/lcov/issues/58
  allow_failure: true
